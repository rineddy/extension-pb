{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "purebasic",
	"patterns": [
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#storages"
		},
		{
			"include": "#entities"
		},
		{
			"include": "#labels"
		},
		{
			"include": "#asm"
		},
		{
			"include": "#preprocesssors"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#operators"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"begin": ";",
					"end": "\\s*$",
					"name": "comment.line.semicolon.purebasic"
				}
			]
		},
		"asm": {
			"patterns": [
				{
					"begin": "!",
					"end": "\\s*$",
					"name": "keyword.control.asm.purebasic"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "~\"",
					"end": "\"",
					"name": "string.interpolated.purebasic",
					"patterns": [
						{
							"match": "\\\\.",
							"name": "constant.character.escape.purebasic"
						}
					]
				},
				{
					"begin": "\"",
					"end": "\"",
					"name": "string.quoted.double.purebasic"
				},
				{
					"begin": "'",
					"end": "'",
					"name": "string.quoted.single.purebasic"
				}
			]
		},
		"labels": {
			"patterns": [
				{
					"match": "(?i)(?<=:|^)\\s*[_a-z]\\w*:(?=\\s*($|;))",
					"name": "entity.name.tag.lab.purebasic"
				},
				{
					"match": "(?i)\\b(Goto|Gosub)\\s+([_a-z]\\w*\\b)?",
					"captures": {
						"1": {
							"name": "keyword.control.purebasic"
						},
						"2": {
							"name": "entity.name.tag.purebasic"
						}
					}
				}
			]
		},
		"preprocesssors": {
			"patterns": [
				{
					"match": "(?i)\\b(CompilerCase|CompilerDefault|CompilerElse|CompilerElseIf|CompilerEndIf|CompilerEndSelect|CompilerError|CompilerIf|CompilerSelect|CompilerWarning)\\b",
					"name": "meta.preprocessor.purebasic"
				}
			]
		},
		"entities": {
			"patterns": [
				{
					"match": "(?i)\\b(?<=\\.)([_a-z]\\w*)\\b",
					"name": "entity.name.type.purebasic"
				},
				{
					"match": "(?i)(?<=\\W|^)\\s*([_a-z]\\w*)(?=::)",
					"captures": {
						"1": {
							"name": "entity.name.type.purebasic"
						}
					}
				},
				{
					"match": "(?i)\\b(?<=Enumeration|EnumerationBinary|Module|DeclareModule|Interface|Structure|UnuseModule|UseModule)\\s+[_a-z]\\w*\\b",
					"name": "entity.name.type.purebasic"
				}
			]
		},
		"storages": {
			"patterns": [
				{
					"match": "(?i)\\b((\\bRuntime\\b)?\\s*Procedure(C|CDLL|DLL)?|DataSection|Macro|Import(C)?|Structure(Union)?|(Declare)?Module|Enumeration(Binary)?|Interface|Prototype(C)?|Declare(C|CDLL|DLL)?)\\b",
					"name": "storage.type.purebasic"
				},
				{
					"match": "(?i)\\b(EndProcedure|EndDataSection|EndMacro|EndImport|EndStructure(Union)?|End(Declare)?Module|EndEnumeration|EndInterface)\\b",
					"name": "storage.type.purebasic"
				}
			]
		},
		"keywords": {
			"repository": {
				"keyword-first-parameter": {
					"patterns": [
						{
							"comment": "Special case to detect pointer variable after keyword",
							"match": "(?i)\\s*([*][_a-z]\\w*([$]|\\b))",
							"captures": {
								"1": {
									"name": "variable.pointer.purebasic"
								}
							}
						},
						{
							"comment": "Special case to detect binary number after keyword",
							"match": "(?i)\\s*(%[01]+)",
							"captures": {
								"1": {
									"name": "constant.numeric.bin.purebasic"
								}
							}
						}
					]
				}		
			},
			"patterns": [
				{
					"match": "(?i)\\b(Dim|NewList|NewMap|Array|List|Map|Protected|Global|Shared|Static|Define|Runtime|UnuseModule|useModule|Align|And|As|Break|CallDebugger|Case|Continue|Data|ReDim|Debug|DebugLevel|Default|DisableASM|DisableDebugger|DisableExplicit|Else|ElseIf|EnableASM|EnableDebugger|EnableExplicit|End|EndIf|EndSelect|EndWith|Extends|FakeReturn|For|ForEach|ForEver|If|IncludeBinary|IncludeFile|IncludePath|MacroExpandedCount|Next|Not|Or|ProcedureReturn|Read|Repeat|Restore|Return|Select|Step|Swap|Threaded|To|UndefineMacro|Until|Wend|While|With|XIncludeFile|XOr)\\b(\\s*[*%].+)?",										
					"captures": {
						"1":{
							"name": "keyword.control.purebasic",
							"patterns": [
								{
									"match": "\\b(Protected|Global|Shared|Static|Define|Runtime|UnuseModule|useModule|Dim|NewList|NewMap)\\b",
									"name": "keyword.control.modifier.decls.purebasic"
								},
								{
									"match": "\\b(Array|List|Map)\\b",
									"name": "keyword.control.modifier.params.purebasic"
								}
							]							
						},
						"2": {
							"patterns": [
								{
									"include": "#keyword-first-parameter"	
								},
								{
									"include": "$self"	
								}									
							]							
						}
					}
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "[-+=*/%&|!~<>]",
					"name": "punctuation.operator.purebasic"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"match": "(?i)(?<=[^)}\\]\\w\\s]|^)\\s*([*][_a-z]\\w*([$]|\\b))",
					"name": "variable.pointer.purebasic"
				},
				{
					"match": "(?i)([?]|@[*]|@)[_a-z]\\w*([$]|\\b)|@(?=\")",
					"name": "variable.pointer.purebasic"
				},
				{
					"match": "(?i)\\b[_a-z]\\w*([$]|\\b)",
					"name": "variable.purebasic"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "(?i)(?<=[^)}\\]\\w\\s]|^)\\s*(%[01]+)",
					"name": "constant.numeric.bin.purebasic"
				},
				{
					"match": "(?i)(?<!\\w)[$][a-f\\d]+",
					"name": "constant.numeric.hex.purebasic"
				},
				{
					"match": "(?i)\\b\\d+(\\.\\d+)?e?",
					"name": "constant.numeric.purebasic"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"match": "(?i)#[_a-z]\\w*[$]?",
					"name": "constant.language.purebasic"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"match": "(?i)\\b[_a-z]\\w*(?=\\s*[(])",
					"name": "entity.name.function.purebasic"
				}
			]
		}
	},
	"scopeName": "source.purebasic"
}